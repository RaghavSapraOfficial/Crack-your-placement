class Solution{
    vector<int> nextSmallerElement(int a[],int n){
        vector<int>ans(n,0);
        stack<int>st;
        st.push(-1);
        for(int i=n-1;i>=0;i--){
            while(st.top() != -1 && a[st.top()] >= a[i]){
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    vector<int> prevSmallerElement(int a[],int n){
        vector<int>ans(n,0);
        stack<int>st;
        st.push(-1);
        for(int i=0;i<n;i++){
            while(st.top() != -1 && a[st.top()] >= a[i]){
                st.pop();
            }
            ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }
    int solve(int a[],int n){
        // 24 july Raghav Sapra
        vector<int>next(n);
        next = nextSmallerElement(a,n);
        
        vector<int>prev(n);
        prev = prevSmallerElement(a,n);
        int ans=INT_MIN;
        for(int i=0;i<n;i++){
            int breadth = a[i];
            if(next[i] == -1){
                next[i] = n;
            }
            int length = next[i] - prev[i] - 1;
            int area = length * breadth;
            ans = max(ans,area);
        }
        return ans;
    }
  public:
    int maxArea(int matrix[MAX][MAX], int m, int n) {
        int ans = solve(matrix[0],n);
        for(int i=1;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j] != 0){
                    matrix[i][j] = matrix[i-1][j] + 1;
                }else{
                    matrix[i][j] = 0;
                }
            }
            int area = solve(matrix[i],n);
            ans = max(ans,area);
        }
        return ans;
    }
};